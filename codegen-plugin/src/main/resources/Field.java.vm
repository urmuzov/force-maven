package ${outputPackage};

import java.util.*;
import java.util.Calendar;

import com.sforce.soap.partner.sobject.SObject;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import java.util.GregorianCalendar;
import com.sforce.ws.bind.XmlObject;

public class Field<T> {
    private static Map<String, Class> objectClassesMap;

    private final Fields fields;
    private final String javaName;
    private final String sfName;
    private final FieldType type;
    private final Integer length;
    private final boolean custom;
    private final FieldReference reference;

    public Field(Fields fields, String javaName, String sfName, FieldType type, Integer length, boolean custom) {
        this(fields, javaName, sfName, type, length, custom, null);
    }

    public Field(Fields fields, String javaName, String sfName, FieldType type, Integer length, boolean custom, FieldReference reference) {
        this.fields = fields;
        this.javaName = javaName;
        this.sfName = sfName;
        this.type = type;
        this.length = length;
        this.custom = custom;
        this.reference = reference;
    }

    public FieldReference reference() {
        return this.reference;
    }

    public String javaName() {
        return javaName;
    }

    public String apiName() {
        return custom ? fields.withNamespace(sfName) : sfName;
    }

    public String sfName() {
        return sfName;
    }

    public FieldType type() {
        return type;
    }

    public Integer length() {
        return length;
    }

    @Override
    public String toString() {
        return apiName();
    }

    public T valueFrom(SObject sObject) {
        Object objValue = sObject.getField(apiName());
        if (objValue == null) {
            return null;
        }
        String strValue = objValue.toString();
        if (type == FieldType.DOUBLE) {
            return (T) Double.valueOf(strValue);
        } else if (type == FieldType.BOOLEAN) {
            return (T) Boolean.valueOf(strValue);
        } else if (type == FieldType.CALENDAR) {
            // Calendar fields returns as GregorianCalendar objects
            return (T) objValue;
        }
        return (T) objValue;
    }

    public String stringValueFrom(SObject sObject) {
        Object objValue = sObject.getField(apiName());
        if (objValue == null) {
            return null;
        }
        String strValue = objValue.toString();
        if (type == FieldType.DOUBLE) {
            return Double.valueOf(strValue).toString();
        } else if (type == FieldType.BOOLEAN) {
            return Boolean.valueOf(strValue).toString();
        } else if (type == FieldType.CALENDAR) {
            return Long.toString(((GregorianCalendar) objValue).getTimeInMillis());
        }
        return strValue;
    }

    public void valueTo(SObject sObject, Object value) {
        String apiName = apiName();
        List<String> nullFields = getFieldsToNull(sObject);
        if (isEmptyValue(value)) {
            if (!nullFields.contains(apiName)) {
                nullFields.add(apiName);
                setFieldsToNull(sObject, nullFields);
            }
            sObject.removeField(apiName);
        } else {
            if (nullFields.contains(apiName)) {
                nullFields.remove(apiName);
                setFieldsToNull(sObject, nullFields);
            }
            sObject.setField(apiName(), convertValue(value));
        }
    }

    private static boolean isEmptyValue(Object value) {
        if (value == null) {
            return true;
        }
        if (value.toString().isEmpty()) {
            return true;
        }
        return false;
    }

    private Object convertValue(Object value) {
        if (value == null) {
            return null;
        }
        if (apiName().equalsIgnoreCase("id")) {
            return value.toString();
        }
        String strValue = value.toString();
        if (type == FieldType.DOUBLE) {
            if (value instanceof Number) {
                return ((Number) value).doubleValue();
            } else {
                return value instanceof Double ? value : Double.valueOf(strValue);
            }
        } else if (type == FieldType.BOOLEAN) {
            return value instanceof Boolean ? value : Boolean.valueOf(strValue);
        } else if (type == FieldType.CALENDAR) {
            if (value instanceof Calendar) {
                return convertToUtc(new DateTime(((Calendar)value).getTimeInMillis())).toGregorianCalendar();
            } else if (value instanceof Number) {
                return convertToUtc(new DateTime(((Number)value).longValue())).toGregorianCalendar();
            } else if (value instanceof Date) {
                return convertToUtc(new DateTime(((Date)value).getTime())).toGregorianCalendar();
            } else if (value instanceof DateTime) {
                return convertToUtc((DateTime)value).toGregorianCalendar();
            } else {
                try {
                    return convertToUtc(new DateTime(Long.parseLong(strValue))).toGregorianCalendar();
                } catch (NumberFormatException ex) {
                    try {
                        return convertToUtc(DateTime.parse(strValue)).toGregorianCalendar();
                    } catch (Exception ex2) {
                        // we tried but can't parse it
                        return value;
                    }
                }
            }
        } else if (type == FieldType.STRING) {
            if (length != null) {
                strValue = strValue.substring(0, Math.min(strValue.length(), length));
            }
            return strValue;
        } else {
            return value;
        }
    }

    private DateTime convertToUtc(DateTime dt) {
        return dt.withZone(DateTimeZone.UTC).plusMillis(dt.getZone().getOffset(dt));
    }

    private static List<String> getFieldsToNull(SObject sObject) {
        Iterator<XmlObject> it = sObject.getChildren("fieldsToNull");
        List<String> result = new ArrayList<String>();
        while(it.hasNext()) {
            result.add((String)it.next().getValue());
        }
        return result;
    }

    public void setFieldsToNull(SObject sObject, List<String> fieldsToNull) {
        for (String field : fieldsToNull) {
            sObject.addField("fieldsToNull", field);
        }
    }
}
